// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CloudFabric.ConfigurationServer.Domain.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ConfigurationService", Description="\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
        "f two numbers", SourceFile="ConfigurationService.feature", SourceLine=0)]
    public partial class ConfigurationServiceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConfigurationService.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConfigurationService", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get configuration properties", new string[] {
                "mytag"}, SourceLine=6)]
        public virtual void GetConfigurationProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get configuration properties", null, new string[] {
                        "mytag"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "testval1",
                        "value"});
            table4.AddRow(new string[] {
                        "WebApi",
                        "value2"});
#line 8
 testRunner.Given("there are the following properties configured", ((string)(null)), table4, "Given ");
#line 12
 testRunner.When("I get configuration properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table5.AddRow(new string[] {
                        "testval1",
                        "value"});
            table5.AddRow(new string[] {
                        "WebApi",
                        "value2"});
#line 13
 testRunner.Then("the configuration transform result should be", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add configuration property conflict", SourceLine=17)]
        public virtual void AddConfigurationPropertyConflict()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add configuration property conflict", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table6.AddRow(new string[] {
                        "testval1",
                        "testval2"});
#line 19
 testRunner.Given("there are the following properties configured", ((string)(null)), table6, "Given ");
#line 22
 testRunner.When("I add a configuration property Name: \'testval1\' Value: \'testing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("there should be an exception thrown \'ConfigurationPropertyAlreadyExistsException\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add configuration", SourceLine=24)]
        public virtual void AddConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add configuration", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table7.AddRow(new string[] {
                        "testval1",
                        "431"});
#line 26
 testRunner.Given("there are the following properties configured", ((string)(null)), table7, "Given ");
#line 29
 testRunner.When("I add the configuration property Name: \'testval2\' Value: \'testing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table8.AddRow(new string[] {
                        "testval1",
                        "431"});
            table8.AddRow(new string[] {
                        "testval2",
                        "testing"});
#line 30
 testRunner.Then("the configuration transform result should be", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("One environment in root", SourceLine=37)]
        public virtual void OneEnvironmentInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One environment in root", null, ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table9.AddRow(new string[] {
                        "testval1",
                        "123"});
            table9.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 39
 testRunner.Given("there are the following properties configured", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table10.AddRow(new string[] {
                        "testval1",
                        "abc"});
#line 43
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table10, "And ");
#line 46
 testRunner.When("I get configuration properties with environment Name: \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table11.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table11.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 47
 testRunner.Then("the configuration transform result should be", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("One environment in root new variable exists in environment", SourceLine=51)]
        public virtual void OneEnvironmentInRootNewVariableExistsInEnvironment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One environment in root new variable exists in environment", null, ((string[])(null)));
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table12.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 53
 testRunner.Given("there are the following properties configured", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table13.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table13.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 56
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table13, "And ");
#line 60
 testRunner.When("I get configuration properties with environment Name: \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table14.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table14.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 61
 testRunner.Then("the configuration transform result should be", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Two environments in root", SourceLine=65)]
        public virtual void TwoEnvironmentsInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two environments in root", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table15.AddRow(new string[] {
                        "testval1",
                        "123"});
            table15.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 67
 testRunner.Given("there are the following properties configured", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table16.AddRow(new string[] {
                        "testval1",
                        "abc"});
#line 71
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table17.AddRow(new string[] {
                        "testval1",
                        "fds"});
#line 74
 testRunner.And("there is an environment configuration Name: \'Production\' with the properties", ((string)(null)), table17, "And ");
#line 77
 testRunner.When("I get configuration properties with environment Name: \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table18.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table18.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 78
 testRunner.Then("the configuration transform result should be", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetched environment doesn\'t exist", SourceLine=82)]
        public virtual void FetchedEnvironmentDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetched environment doesn\'t exist", null, ((string[])(null)));
#line 83
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table19.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 84
 testRunner.Given("there are the following properties configured", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table20.AddRow(new string[] {
                        "testval1",
                        "321"});
            table20.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 87
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table20, "And ");
#line 91
 testRunner.When("I get configuration properties with environment Name: \'Production\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table21.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 92
 testRunner.Then("the configuration transform result should be", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("add duplicate environment throws exception", SourceLine=95)]
        public virtual void AddDuplicateEnvironmentThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("add duplicate environment throws exception", null, ((string[])(null)));
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table22.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 97
 testRunner.Given("there are the following properties configured", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table23.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 100
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table24.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 103
 testRunner.When("I add an environment Name: \'Staging\' with the properties", ((string)(null)), table24, "When ");
#line 106
 testRunner.Then("there should be an exception thrown \'EnvironmentConfigurationAlreadyExistsExcepti" +
                    "on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("one application in root", SourceLine=109)]
        public virtual void OneApplicationInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("one application in root", null, ((string[])(null)));
#line 110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table25.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 111
 testRunner.Given("there are the following properties configured", ((string)(null)), table25, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table26.AddRow(new string[] {
                        "testval1",
                        "321"});
            table26.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 114
 testRunner.And("there is an application configuration Name: \'Web\' with the properties", ((string)(null)), table26, "And ");
#line 118
 testRunner.When("I get configuration properties with application Name: \'Web\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table27.AddRow(new string[] {
                        "testval1",
                        "321"});
            table27.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 119
 testRunner.Then("the configuration transform result should be", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("one application in root but fetch wrong name", SourceLine=123)]
        public virtual void OneApplicationInRootButFetchWrongName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("one application in root but fetch wrong name", null, ((string[])(null)));
#line 124
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table28.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 125
 testRunner.Given("there are the following properties configured", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table29.AddRow(new string[] {
                        "testval1",
                        "321"});
            table29.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 128
 testRunner.And("there is an application configuration Name: \'Web\' with the properties", ((string)(null)), table29, "And ");
#line 132
 testRunner.When("I get configuration properties with application Name: \'Webs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table30.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 133
 testRunner.Then("the configuration transform result should be", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("one application and environment in root", SourceLine=136)]
        public virtual void OneApplicationAndEnvironmentInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("one application and environment in root", null, ((string[])(null)));
#line 137
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table31.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 138
 testRunner.Given("there are the following properties configured", ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table32.AddRow(new string[] {
                        "testval1",
                        "adsf"});
#line 141
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table33.AddRow(new string[] {
                        "testval1",
                        "321"});
            table33.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 144
 testRunner.And("there is an application configuration Name: \'Web\' with the properties", ((string)(null)), table33, "And ");
#line 148
 testRunner.When("I get configuration properties with application Name: \'Web\' and environment Name:" +
                    " \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table34.AddRow(new string[] {
                        "testval1",
                        "321"});
            table34.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 149
 testRunner.Then("the configuration transform result should be", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
