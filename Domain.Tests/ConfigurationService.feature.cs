// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Domain.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConfigurationServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "ConfigurationService.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConfigurationService", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ConfigurationService")))
            {
                global::Domain.Tests.ConfigurationServiceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get configuration properties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void GetConfigurationProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get configuration properties", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table8.AddRow(new string[] {
                        "testval1",
                        "value"});
            table8.AddRow(new string[] {
                        "WebApi",
                        "value2"});
#line 7
 testRunner.Given("there are the following properties configured", ((string)(null)), table8, "Given ");
#line 11
 testRunner.When("I get configuration properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table9.AddRow(new string[] {
                        "testval1",
                        "value"});
            table9.AddRow(new string[] {
                        "WebApi",
                        "value2"});
#line 12
 testRunner.Then("the configuration transform result should be", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add configuration property conflict")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void AddConfigurationPropertyConflict()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add configuration property conflict", null, ((string[])(null)));
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table10.AddRow(new string[] {
                        "testval1",
                        "testval2"});
#line 18
 testRunner.Given("there are the following properties configured", ((string)(null)), table10, "Given ");
#line 21
 testRunner.When("I add a configuration property Name: \'testval1\' Value: \'testing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("there should be an exception thrown \'ConfigurationPropertyAlreadyExistsException\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add configuration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void AddConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add configuration", null, ((string[])(null)));
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table11.AddRow(new string[] {
                        "testval1",
                        "431"});
#line 25
 testRunner.Given("there are the following properties configured", ((string)(null)), table11, "Given ");
#line 28
 testRunner.When("I add the configuration property Name: \'testval2\' Value: \'testing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table12.AddRow(new string[] {
                        "testval1",
                        "431"});
            table12.AddRow(new string[] {
                        "testval2",
                        "testing"});
#line 29
 testRunner.Then("the configuration transform result should be", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("One environment in root")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void OneEnvironmentInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One environment in root", null, ((string[])(null)));
#line 37
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table13.AddRow(new string[] {
                        "testval1",
                        "123"});
            table13.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 38
 testRunner.Given("there are the following properties configured", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table14.AddRow(new string[] {
                        "testval1",
                        "abc"});
#line 42
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table14, "And ");
#line 45
 testRunner.When("I get configuration properties with environment Name: \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table15.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table15.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 46
 testRunner.Then("the configuration transform result should be", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("One environment in root new variable exists in environment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void OneEnvironmentInRootNewVariableExistsInEnvironment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One environment in root new variable exists in environment", null, ((string[])(null)));
#line 51
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table16.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 52
 testRunner.Given("there are the following properties configured", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table17.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table17.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 55
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table17, "And ");
#line 59
 testRunner.When("I get configuration properties with environment Name: \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table18.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table18.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 60
 testRunner.Then("the configuration transform result should be", ((string)(null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Two environments in root")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void TwoEnvironmentsInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two environments in root", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table19.AddRow(new string[] {
                        "testval1",
                        "123"});
            table19.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 66
 testRunner.Given("there are the following properties configured", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table20.AddRow(new string[] {
                        "testval1",
                        "abc"});
#line 70
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table21.AddRow(new string[] {
                        "testval1",
                        "fds"});
#line 73
 testRunner.And("there is an environment configuration Name: \'Production\' with the properties", ((string)(null)), table21, "And ");
#line 76
 testRunner.When("I get configuration properties with environment Name: \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table22.AddRow(new string[] {
                        "testval1",
                        "abc"});
            table22.AddRow(new string[] {
                        "testval2",
                        "asdf"});
#line 77
 testRunner.Then("the configuration transform result should be", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fetched environment doesn\'t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void FetchedEnvironmentDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetched environment doesn\'t exist", null, ((string[])(null)));
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table23.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 83
 testRunner.Given("there are the following properties configured", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table24.AddRow(new string[] {
                        "testval1",
                        "321"});
            table24.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 86
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table24, "And ");
#line 90
 testRunner.When("I get configuration properties with environment Name: \'Production\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table25.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 91
 testRunner.Then("the configuration transform result should be", ((string)(null)), table25, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("add duplicate environment throws exception")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void AddDuplicateEnvironmentThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("add duplicate environment throws exception", null, ((string[])(null)));
#line 95
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table26.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 96
 testRunner.Given("there are the following properties configured", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table27.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 99
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table28.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 102
 testRunner.When("I add an environment Name: \'Staging\' with the properties", ((string)(null)), table28, "When ");
#line 105
 testRunner.Then("there should be an exception thrown \'EnvironmentConfigurationAlreadyExistsExcepti" +
                    "on\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("one application in root")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void OneApplicationInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("one application in root", null, ((string[])(null)));
#line 109
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table29.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 110
 testRunner.Given("there are the following properties configured", ((string)(null)), table29, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table30.AddRow(new string[] {
                        "testval1",
                        "321"});
            table30.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 113
 testRunner.And("there is an application configuration Name: \'Web\' with the properties", ((string)(null)), table30, "And ");
#line 117
 testRunner.When("I get configuration properties with application Name: \'Web\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table31.AddRow(new string[] {
                        "testval1",
                        "321"});
            table31.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 118
 testRunner.Then("the configuration transform result should be", ((string)(null)), table31, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("one application in root but fetch wrong name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void OneApplicationInRootButFetchWrongName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("one application in root but fetch wrong name", null, ((string[])(null)));
#line 123
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table32.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 124
 testRunner.Given("there are the following properties configured", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table33.AddRow(new string[] {
                        "testval1",
                        "321"});
            table33.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 127
 testRunner.And("there is an application configuration Name: \'Web\' with the properties", ((string)(null)), table33, "And ");
#line 131
 testRunner.When("I get configuration properties with application Name: \'Webs\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table34.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 132
 testRunner.Then("the configuration transform result should be", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("one application and environment in root")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ConfigurationService")]
        public virtual void OneApplicationAndEnvironmentInRoot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("one application and environment in root", null, ((string[])(null)));
#line 136
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table35.AddRow(new string[] {
                        "testval1",
                        "123"});
#line 137
 testRunner.Given("there are the following properties configured", ((string)(null)), table35, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table36.AddRow(new string[] {
                        "testval1",
                        "adsf"});
#line 140
 testRunner.And("there is an environment configuration Name: \'Staging\' with the properties", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table37.AddRow(new string[] {
                        "testval1",
                        "321"});
            table37.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 143
 testRunner.And("there is an application configuration Name: \'Web\' with the properties", ((string)(null)), table37, "And ");
#line 147
 testRunner.When("I get configuration properties with application Name: \'Web\' and environment Name:" +
                    " \'Staging\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table38.AddRow(new string[] {
                        "testval1",
                        "321"});
            table38.AddRow(new string[] {
                        "testval2",
                        "fds"});
#line 148
 testRunner.Then("the configuration transform result should be", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
